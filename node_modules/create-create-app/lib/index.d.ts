import { CommonOptions, ExecaChildProcess } from 'execa';
import { OptionData } from 'yargs-interactive';

declare type PackageManager = 'npm' | 'yarn' | 'pnpm';

interface Option {
    [key: string]: OptionData | {
        default: boolean;
    };
}
interface Options {
    templateRoot: string;
    modifyName?: (name: string) => string | Promise<string>;
    extra?: Option;
    defaultDescription?: string;
    defaultAuthor?: string;
    defaultEmail?: string;
    defaultTemplate?: string;
    defaultLicense?: string;
    defaultPackageManager?: PackageManager;
    promptForDescription?: boolean;
    promptForAuthor?: boolean;
    promptForEmail?: boolean;
    promptForTemplate?: boolean;
    promptForLicense?: boolean;
    promptForPackageManager?: boolean;
    skipGitInit?: boolean;
    skipNpmInstall?: boolean;
    after?: (options: AfterHookOptions) => void | Promise<void>;
    caveat?: string | ((options: AfterHookOptions) => string | void | Promise<string | void>);
}
interface View {
    name: string;
    description: string;
    author: string;
    email: string;
    contact: string;
    license: string;
    [key: string]: string | number | boolean | any[];
}
interface AfterHookOptions {
    name: string;
    packageDir: string;
    template: string;
    templateDir: string;
    year: number;
    answers: View;
    run: (command: string, options?: CommonOptions<string>) => ExecaChildProcess<string>;
    installNpmPackage: (packageName: string, isDev?: boolean) => Promise<void>;
}
declare class CLIError extends Error {
    constructor(message: string);
}
declare function printCommand(...commands: string[]): void;
declare function create(appName: string, options: Options): Promise<void>;

export { AfterHookOptions, CLIError, Option, Options, View, create, printCommand };
