import { EnvInfo } from "./envinfo";
export declare type EventID = string;
declare type MaybePromise<T> = T | Promise<T>;
export interface EpicfailOption {
    name?: string;
    message?: boolean;
    stacktrace?: boolean;
    issues?: boolean;
    env?: Partial<EnvInfo> | false;
    onError?: (err: Error, ...rest: any[]) => EventID | undefined;
    assertExpected?: (err: Error) => MaybePromise<boolean>;
}
export declare class EpicfailError extends Error {
    epicfail?: EpicfailOption;
    constructor(message?: string, option?: EpicfailOption);
}
export declare function fail(message?: Error | string, Option?: EpicfailOption): never;
export declare function logAndExit(message?: Error | string, option?: EpicfailOption): never;
export declare function epicfail(moduleEntrypoint: string, cliFlags?: EpicfailOption): void;
export {};
