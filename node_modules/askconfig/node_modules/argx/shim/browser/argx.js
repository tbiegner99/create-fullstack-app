/**
 * Parse arguments.
 * @constructor Argx
 * @param {Arguments} args - Function arguments
 */
'use strict';

var iftype = require('iftype');

var isNumber = require('./type/is_number');
/** @lends constructor */


function Argx(args) {
  var s = this;
  s.values = Array.prototype.slice.call(args, 0);
}

Argx.prototype = {
  /**
   * Splice argument values.
   * @param {number} start - Where to start
   * @param {number} [howmany=1] - Number of value to get.
   * @param {string} [type] - Type restriction.
   */
  splice: function splice(start, howmany, type) {
    var s = this;

    if (typeof arguments[1] !== 'number') {
      if (isNumber(arguments[1])) {
        howmany = Number(arguments[1]);
      } else {
        type = arguments[1];
        howmany = 1;
      }
    }

    howmany = howmany || 1;

    if (start < 0) {
      start += s.values.length;
    }

    var result;
    var hitCount = 0;

    for (var i = start + howmany - 1; i >= start; i--) {
      var skipByType = type && !iftype(s.values[i]).is(type);

      if (skipByType) {
        break;
      }

      var spliced = s.values.splice(i, 1);

      if (!spliced.length) {
        break;
      }

      spliced = spliced[0];

      switch (hitCount) {
        case 0:
          result = spliced;
          break;

        case 1:
          result = [spliced, result];
          break;

        default:
          result.unshift(spliced);
          break;
      }

      hitCount += 1;
    }

    return result;
  },

  /**
   * Pop values
   * @param {number|string} [howmany=1] - Number of value to get.
   * @param {string|function} [type] - Type restriction. Could be a name of type or a constructor.
   * @returns {*} - Value. Array if multiple hits.
   * @example
   *  function doSomething() {
     *      let args = argx(arguments)
     *      args.pop()
     *      args.pop(2)
     *      args.pop('string')
     *      args.pop(MyCustomError)
     *  }
   */
  pop: function pop(howmany, type) {
    var s = this;
    var from = -Number(howmany);

    if (isNaN(from)) {
      from = -1;
    }

    return s.splice(from, howmany, type);
  },

  /**
   * Shift values
   * @param {number|string} [howmany=1] - Number of value to get.
   * @param {string} [type] - Type restriction. Could be a name of type or a constructor.
   * @returns {*} - Value. Array if multiple hits.
   * @example
   *  function doSomething() {
     *      let args = argx(arguments)
     *      args.shift()
     *      args.shift(2)
     *      args.shift('string')
     *      args.shift(MyCustomError)
     *  }
   */
  shift: function shift(howmany, type) {
    var s = this;
    return s.splice(0, howmany, type);
  },

  /**
   * Get all remain values.
   * @returns {Array}
   */
  remain: function remain() {
    var s = this;
    var values = s.values;
    s.values = [];
    return values;
  }
};
module.exports = Argx;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImFyZ3guanMiXSwibmFtZXMiOlsiaWZ0eXBlIiwicmVxdWlyZSIsImlzTnVtYmVyIiwiQXJneCIsImFyZ3MiLCJzIiwidmFsdWVzIiwiQXJyYXkiLCJwcm90b3R5cGUiLCJzbGljZSIsImNhbGwiLCJzcGxpY2UiLCJzdGFydCIsImhvd21hbnkiLCJ0eXBlIiwiYXJndW1lbnRzIiwiTnVtYmVyIiwibGVuZ3RoIiwicmVzdWx0IiwiaGl0Q291bnQiLCJpIiwic2tpcEJ5VHlwZSIsImlzIiwic3BsaWNlZCIsInVuc2hpZnQiLCJwb3AiLCJmcm9tIiwiaXNOYU4iLCJzaGlmdCIsInJlbWFpbiIsIm1vZHVsZSIsImV4cG9ydHMiXSwibWFwcGluZ3MiOiJBQUFBOzs7OztBQU1BOztBQUVBLElBQU1BLE1BQU0sR0FBR0MsT0FBTyxDQUFDLFFBQUQsQ0FBdEI7O0FBQ0EsSUFBTUMsUUFBUSxHQUFHRCxPQUFPLENBQUMsa0JBQUQsQ0FBeEI7QUFFQTs7O0FBQ0EsU0FBU0UsSUFBVCxDQUFlQyxJQUFmLEVBQXFCO0FBQ25CLE1BQU1DLENBQUMsR0FBRyxJQUFWO0FBQ0FBLEVBQUFBLENBQUMsQ0FBQ0MsTUFBRixHQUFXQyxLQUFLLENBQUNDLFNBQU4sQ0FBZ0JDLEtBQWhCLENBQXNCQyxJQUF0QixDQUEyQk4sSUFBM0IsRUFBaUMsQ0FBakMsQ0FBWDtBQUNEOztBQUVERCxJQUFJLENBQUNLLFNBQUwsR0FBaUI7QUFDZjs7Ozs7O0FBTUFHLEVBQUFBLE1BUGUsa0JBT1BDLEtBUE8sRUFPQUMsT0FQQSxFQU9TQyxJQVBULEVBT2U7QUFDNUIsUUFBTVQsQ0FBQyxHQUFHLElBQVY7O0FBRUEsUUFBSSxPQUFPVSxTQUFTLENBQUUsQ0FBRixDQUFoQixLQUEwQixRQUE5QixFQUF3QztBQUN0QyxVQUFJYixRQUFRLENBQUNhLFNBQVMsQ0FBRSxDQUFGLENBQVYsQ0FBWixFQUE4QjtBQUM1QkYsUUFBQUEsT0FBTyxHQUFHRyxNQUFNLENBQUNELFNBQVMsQ0FBRSxDQUFGLENBQVYsQ0FBaEI7QUFDRCxPQUZELE1BRU87QUFDTEQsUUFBQUEsSUFBSSxHQUFHQyxTQUFTLENBQUUsQ0FBRixDQUFoQjtBQUNBRixRQUFBQSxPQUFPLEdBQUcsQ0FBVjtBQUNEO0FBQ0Y7O0FBQ0RBLElBQUFBLE9BQU8sR0FBR0EsT0FBTyxJQUFJLENBQXJCOztBQUNBLFFBQUlELEtBQUssR0FBRyxDQUFaLEVBQWU7QUFDYkEsTUFBQUEsS0FBSyxJQUFJUCxDQUFDLENBQUNDLE1BQUYsQ0FBU1csTUFBbEI7QUFDRDs7QUFDRCxRQUFJQyxNQUFKO0FBQ0EsUUFBSUMsUUFBUSxHQUFHLENBQWY7O0FBQ0EsU0FBSyxJQUFJQyxDQUFDLEdBQUdSLEtBQUssR0FBR0MsT0FBUixHQUFrQixDQUEvQixFQUFrQ08sQ0FBQyxJQUFJUixLQUF2QyxFQUE4Q1EsQ0FBQyxFQUEvQyxFQUFtRDtBQUNqRCxVQUFJQyxVQUFVLEdBQUdQLElBQUksSUFBSSxDQUFDZCxNQUFNLENBQUNLLENBQUMsQ0FBQ0MsTUFBRixDQUFVYyxDQUFWLENBQUQsQ0FBTixDQUFzQkUsRUFBdEIsQ0FBeUJSLElBQXpCLENBQTFCOztBQUNBLFVBQUlPLFVBQUosRUFBZ0I7QUFDZDtBQUNEOztBQUNELFVBQUlFLE9BQU8sR0FBR2xCLENBQUMsQ0FBQ0MsTUFBRixDQUFTSyxNQUFULENBQWdCUyxDQUFoQixFQUFtQixDQUFuQixDQUFkOztBQUNBLFVBQUksQ0FBQ0csT0FBTyxDQUFDTixNQUFiLEVBQXFCO0FBQ25CO0FBQ0Q7O0FBQ0RNLE1BQUFBLE9BQU8sR0FBR0EsT0FBTyxDQUFFLENBQUYsQ0FBakI7O0FBQ0EsY0FBUUosUUFBUjtBQUNFLGFBQUssQ0FBTDtBQUNFRCxVQUFBQSxNQUFNLEdBQUdLLE9BQVQ7QUFDQTs7QUFDRixhQUFLLENBQUw7QUFDRUwsVUFBQUEsTUFBTSxHQUFHLENBQUVLLE9BQUYsRUFBV0wsTUFBWCxDQUFUO0FBQ0E7O0FBQ0Y7QUFDRUEsVUFBQUEsTUFBTSxDQUFDTSxPQUFQLENBQWVELE9BQWY7QUFDQTtBQVRKOztBQVdBSixNQUFBQSxRQUFRLElBQUksQ0FBWjtBQUNEOztBQUNELFdBQU9ELE1BQVA7QUFDRCxHQWhEYzs7QUFpRGY7Ozs7Ozs7Ozs7Ozs7O0FBY0FPLEVBQUFBLEdBL0RlLGVBK0RWWixPQS9EVSxFQStEREMsSUEvREMsRUErREs7QUFDbEIsUUFBTVQsQ0FBQyxHQUFHLElBQVY7QUFDQSxRQUFJcUIsSUFBSSxHQUFHLENBQUNWLE1BQU0sQ0FBQ0gsT0FBRCxDQUFsQjs7QUFDQSxRQUFJYyxLQUFLLENBQUNELElBQUQsQ0FBVCxFQUFpQjtBQUNmQSxNQUFBQSxJQUFJLEdBQUcsQ0FBQyxDQUFSO0FBQ0Q7O0FBQ0QsV0FBT3JCLENBQUMsQ0FBQ00sTUFBRixDQUFTZSxJQUFULEVBQWViLE9BQWYsRUFBd0JDLElBQXhCLENBQVA7QUFDRCxHQXRFYzs7QUF1RWY7Ozs7Ozs7Ozs7Ozs7O0FBY0FjLEVBQUFBLEtBckZlLGlCQXFGUmYsT0FyRlEsRUFxRkNDLElBckZELEVBcUZPO0FBQ3BCLFFBQU1ULENBQUMsR0FBRyxJQUFWO0FBQ0EsV0FBT0EsQ0FBQyxDQUFDTSxNQUFGLENBQVMsQ0FBVCxFQUFZRSxPQUFaLEVBQXFCQyxJQUFyQixDQUFQO0FBQ0QsR0F4RmM7O0FBeUZmOzs7O0FBSUFlLEVBQUFBLE1BN0ZlLG9CQTZGTDtBQUNSLFFBQU14QixDQUFDLEdBQUcsSUFBVjtBQUNBLFFBQUlDLE1BQU0sR0FBR0QsQ0FBQyxDQUFDQyxNQUFmO0FBQ0FELElBQUFBLENBQUMsQ0FBQ0MsTUFBRixHQUFXLEVBQVg7QUFDQSxXQUFPQSxNQUFQO0FBQ0Q7QUFsR2MsQ0FBakI7QUFxR0F3QixNQUFNLENBQUNDLE9BQVAsR0FBaUI1QixJQUFqQiIsInNvdXJjZVJvb3QiOiIuLi8uLi9saWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFBhcnNlIGFyZ3VtZW50cy5cbiAqIEBjb25zdHJ1Y3RvciBBcmd4XG4gKiBAcGFyYW0ge0FyZ3VtZW50c30gYXJncyAtIEZ1bmN0aW9uIGFyZ3VtZW50c1xuICovXG5cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCBpZnR5cGUgPSByZXF1aXJlKCdpZnR5cGUnKVxuY29uc3QgaXNOdW1iZXIgPSByZXF1aXJlKCcuL3R5cGUvaXNfbnVtYmVyJylcblxuLyoqIEBsZW5kcyBjb25zdHJ1Y3RvciAqL1xuZnVuY3Rpb24gQXJneCAoYXJncykge1xuICBjb25zdCBzID0gdGhpc1xuICBzLnZhbHVlcyA9IEFycmF5LnByb3RvdHlwZS5zbGljZS5jYWxsKGFyZ3MsIDApXG59XG5cbkFyZ3gucHJvdG90eXBlID0ge1xuICAvKipcbiAgICogU3BsaWNlIGFyZ3VtZW50IHZhbHVlcy5cbiAgICogQHBhcmFtIHtudW1iZXJ9IHN0YXJ0IC0gV2hlcmUgdG8gc3RhcnRcbiAgICogQHBhcmFtIHtudW1iZXJ9IFtob3dtYW55PTFdIC0gTnVtYmVyIG9mIHZhbHVlIHRvIGdldC5cbiAgICogQHBhcmFtIHtzdHJpbmd9IFt0eXBlXSAtIFR5cGUgcmVzdHJpY3Rpb24uXG4gICAqL1xuICBzcGxpY2UgKHN0YXJ0LCBob3dtYW55LCB0eXBlKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcblxuICAgIGlmICh0eXBlb2YgYXJndW1lbnRzWyAxIF0gIT09ICdudW1iZXInKSB7XG4gICAgICBpZiAoaXNOdW1iZXIoYXJndW1lbnRzWyAxIF0pKSB7XG4gICAgICAgIGhvd21hbnkgPSBOdW1iZXIoYXJndW1lbnRzWyAxIF0pXG4gICAgICB9IGVsc2Uge1xuICAgICAgICB0eXBlID0gYXJndW1lbnRzWyAxIF1cbiAgICAgICAgaG93bWFueSA9IDFcbiAgICAgIH1cbiAgICB9XG4gICAgaG93bWFueSA9IGhvd21hbnkgfHwgMVxuICAgIGlmIChzdGFydCA8IDApIHtcbiAgICAgIHN0YXJ0ICs9IHMudmFsdWVzLmxlbmd0aFxuICAgIH1cbiAgICBsZXQgcmVzdWx0XG4gICAgbGV0IGhpdENvdW50ID0gMFxuICAgIGZvciAobGV0IGkgPSBzdGFydCArIGhvd21hbnkgLSAxOyBpID49IHN0YXJ0OyBpLS0pIHtcbiAgICAgIGxldCBza2lwQnlUeXBlID0gdHlwZSAmJiAhaWZ0eXBlKHMudmFsdWVzWyBpIF0pLmlzKHR5cGUpXG4gICAgICBpZiAoc2tpcEJ5VHlwZSkge1xuICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgbGV0IHNwbGljZWQgPSBzLnZhbHVlcy5zcGxpY2UoaSwgMSlcbiAgICAgIGlmICghc3BsaWNlZC5sZW5ndGgpIHtcbiAgICAgICAgYnJlYWtcbiAgICAgIH1cbiAgICAgIHNwbGljZWQgPSBzcGxpY2VkWyAwIF1cbiAgICAgIHN3aXRjaCAoaGl0Q291bnQpIHtcbiAgICAgICAgY2FzZSAwOlxuICAgICAgICAgIHJlc3VsdCA9IHNwbGljZWRcbiAgICAgICAgICBicmVha1xuICAgICAgICBjYXNlIDE6XG4gICAgICAgICAgcmVzdWx0ID0gWyBzcGxpY2VkLCByZXN1bHQgXVxuICAgICAgICAgIGJyZWFrXG4gICAgICAgIGRlZmF1bHQ6XG4gICAgICAgICAgcmVzdWx0LnVuc2hpZnQoc3BsaWNlZClcbiAgICAgICAgICBicmVha1xuICAgICAgfVxuICAgICAgaGl0Q291bnQgKz0gMVxuICAgIH1cbiAgICByZXR1cm4gcmVzdWx0XG4gIH0sXG4gIC8qKlxuICAgKiBQb3AgdmFsdWVzXG4gICAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gW2hvd21hbnk9MV0gLSBOdW1iZXIgb2YgdmFsdWUgdG8gZ2V0LlxuICAgKiBAcGFyYW0ge3N0cmluZ3xmdW5jdGlvbn0gW3R5cGVdIC0gVHlwZSByZXN0cmljdGlvbi4gQ291bGQgYmUgYSBuYW1lIG9mIHR5cGUgb3IgYSBjb25zdHJ1Y3Rvci5cbiAgICogQHJldHVybnMgeyp9IC0gVmFsdWUuIEFycmF5IGlmIG11bHRpcGxlIGhpdHMuXG4gICAqIEBleGFtcGxlXG4gICAqICBmdW5jdGlvbiBkb1NvbWV0aGluZygpIHtcbiAgICAgKiAgICAgIGxldCBhcmdzID0gYXJneChhcmd1bWVudHMpXG4gICAgICogICAgICBhcmdzLnBvcCgpXG4gICAgICogICAgICBhcmdzLnBvcCgyKVxuICAgICAqICAgICAgYXJncy5wb3AoJ3N0cmluZycpXG4gICAgICogICAgICBhcmdzLnBvcChNeUN1c3RvbUVycm9yKVxuICAgICAqICB9XG4gICAqL1xuICBwb3AgKGhvd21hbnksIHR5cGUpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIGxldCBmcm9tID0gLU51bWJlcihob3dtYW55KVxuICAgIGlmIChpc05hTihmcm9tKSkge1xuICAgICAgZnJvbSA9IC0xXG4gICAgfVxuICAgIHJldHVybiBzLnNwbGljZShmcm9tLCBob3dtYW55LCB0eXBlKVxuICB9LFxuICAvKipcbiAgICogU2hpZnQgdmFsdWVzXG4gICAqIEBwYXJhbSB7bnVtYmVyfHN0cmluZ30gW2hvd21hbnk9MV0gLSBOdW1iZXIgb2YgdmFsdWUgdG8gZ2V0LlxuICAgKiBAcGFyYW0ge3N0cmluZ30gW3R5cGVdIC0gVHlwZSByZXN0cmljdGlvbi4gQ291bGQgYmUgYSBuYW1lIG9mIHR5cGUgb3IgYSBjb25zdHJ1Y3Rvci5cbiAgICogQHJldHVybnMgeyp9IC0gVmFsdWUuIEFycmF5IGlmIG11bHRpcGxlIGhpdHMuXG4gICAqIEBleGFtcGxlXG4gICAqICBmdW5jdGlvbiBkb1NvbWV0aGluZygpIHtcbiAgICAgKiAgICAgIGxldCBhcmdzID0gYXJneChhcmd1bWVudHMpXG4gICAgICogICAgICBhcmdzLnNoaWZ0KClcbiAgICAgKiAgICAgIGFyZ3Muc2hpZnQoMilcbiAgICAgKiAgICAgIGFyZ3Muc2hpZnQoJ3N0cmluZycpXG4gICAgICogICAgICBhcmdzLnNoaWZ0KE15Q3VzdG9tRXJyb3IpXG4gICAgICogIH1cbiAgICovXG4gIHNoaWZ0IChob3dtYW55LCB0eXBlKSB7XG4gICAgY29uc3QgcyA9IHRoaXNcbiAgICByZXR1cm4gcy5zcGxpY2UoMCwgaG93bWFueSwgdHlwZSlcbiAgfSxcbiAgLyoqXG4gICAqIEdldCBhbGwgcmVtYWluIHZhbHVlcy5cbiAgICogQHJldHVybnMge0FycmF5fVxuICAgKi9cbiAgcmVtYWluICgpIHtcbiAgICBjb25zdCBzID0gdGhpc1xuICAgIGxldCB2YWx1ZXMgPSBzLnZhbHVlc1xuICAgIHMudmFsdWVzID0gW11cbiAgICByZXR1cm4gdmFsdWVzXG4gIH1cbn1cblxubW9kdWxlLmV4cG9ydHMgPSBBcmd4XG4iXX0=