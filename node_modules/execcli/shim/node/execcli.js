/**
 * Execute cli.
 * @function execcli
 * @param {string} cmdBin - Bin command to execute.
 * @param {Array} cmdArgs - Bin command arguments to execute.
 * @param {object} [options] - Optional settings.
 * @param {string} [options.notfound] - Instruction text when bin not found.
 * @param {string} [options.cwd=process.cwd()] - Working directory path.
 * @return {Promise}
 * @example
 *
 */
'use strict';

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

var _regenerator = _interopRequireDefault(require("@babel/runtime/regenerator"));

var _typeof2 = _interopRequireDefault(require("@babel/runtime/helpers/typeof"));

var _asyncToGenerator2 = _interopRequireDefault(require("@babel/runtime/helpers/asyncToGenerator"));

var argx = require('argx');

var arrayreduce = require('arrayreduce');

var hasbin = require('hasbin');

var path = require('path');

var fs = require('fs');

var spawnProcess = require('./processing/spawn_process');

var _optionArgs = require('./_option_args');

var warnCallback = function warnCallback() {
  return console.log('[execcli] Callback is now deprecated. Use promise instead.');
};
/** @lends execcli */


function execcli(_x, _x2, _x3) {
  return _execcli.apply(this, arguments);
}

function _execcli() {
  _execcli = (0, _asyncToGenerator2.default)(
  /*#__PURE__*/
  _regenerator.default.mark(function _callee(cmdBin, cmdArgs, options) {
    var args,
        callback,
        here,
        cwd,
        hasBinAsIs,
        hasbinAsPath,
        valid,
        result,
        _args = arguments;
    return _regenerator.default.wrap(function _callee$(_context) {
      while (1) {
        switch (_context.prev = _context.next) {
          case 0:
            args = argx(_args);
            callback = args.pop('function');
            cmdBin = args.shift('string');
            cmdArgs = (args.shift('array') || []).map(function (arg) {
              if ((0, _typeof2.default)(arg) === 'object') {
                return _optionArgs(arg);
              }

              return arg;
            }).reduce(arrayreduce.arrayConcat(), []);
            options = args.pop('object') || {};
            here = process.cwd();
            cwd = options.cwd || process.cwd();
            _context.prev = 7;
            process.chdir(cwd);
            _context.next = 11;
            return new Promise(function (resolve) {
              return hasbin(cmdBin, function (hasBinAsIs) {
                return resolve(hasBinAsIs);
              });
            });

          case 11:
            hasBinAsIs = _context.sent;
            _context.next = 14;
            return new Promise(function (resolve) {
              return fs.exists(path.resolve(cmdBin), function (hasbinAsPath) {
                return resolve(hasbinAsPath);
              });
            });

          case 14:
            hasbinAsPath = _context.sent;
            valid = hasBinAsIs || hasbinAsPath;

            if (valid) {
              _context.next = 18;
              break;
            }

            throw new Error("Command `".concat(cmdBin, "` not found. ").concat(options.notfound));

          case 18:
            _context.next = 20;
            return spawnProcess(cmdBin, cmdArgs, options);

          case 20:
            result = _context.sent;
            process.chdir(here);

            if (callback) {
              warnCallback();
              callback(null);
            }

            return _context.abrupt("return", result);

          case 26:
            _context.prev = 26;
            _context.t0 = _context["catch"](7);
            process.chdir(here);

            if (callback) {
              warnCallback();
              callback(_context.t0);
            }

            return _context.abrupt("return", Promise.reject(_context.t0));

          case 31:
          case "end":
            return _context.stop();
        }
      }
    }, _callee, null, [[7, 26]]);
  }));
  return _execcli.apply(this, arguments);
}

execcli._optionArgs = _optionArgs;
module.exports = execcli;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImV4ZWNjbGkuanMiXSwibmFtZXMiOlsiYXJneCIsInJlcXVpcmUiLCJhcnJheXJlZHVjZSIsImhhc2JpbiIsInBhdGgiLCJmcyIsInNwYXduUHJvY2VzcyIsIl9vcHRpb25BcmdzIiwid2FybkNhbGxiYWNrIiwiY29uc29sZSIsImxvZyIsImV4ZWNjbGkiLCJjbWRCaW4iLCJjbWRBcmdzIiwib3B0aW9ucyIsImFyZ3MiLCJjYWxsYmFjayIsInBvcCIsInNoaWZ0IiwibWFwIiwiYXJnIiwicmVkdWNlIiwiYXJyYXlDb25jYXQiLCJoZXJlIiwicHJvY2VzcyIsImN3ZCIsImNoZGlyIiwiUHJvbWlzZSIsInJlc29sdmUiLCJoYXNCaW5Bc0lzIiwiZXhpc3RzIiwiaGFzYmluQXNQYXRoIiwidmFsaWQiLCJFcnJvciIsIm5vdGZvdW5kIiwicmVzdWx0IiwicmVqZWN0IiwibW9kdWxlIiwiZXhwb3J0cyJdLCJtYXBwaW5ncyI6IkFBQUE7Ozs7Ozs7Ozs7OztBQWFBOzs7Ozs7Ozs7O0FBRUEsSUFBTUEsSUFBSSxHQUFHQyxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxJQUFNQyxXQUFXLEdBQUdELE9BQU8sQ0FBQyxhQUFELENBQTNCOztBQUNBLElBQU1FLE1BQU0sR0FBR0YsT0FBTyxDQUFDLFFBQUQsQ0FBdEI7O0FBQ0EsSUFBTUcsSUFBSSxHQUFHSCxPQUFPLENBQUMsTUFBRCxDQUFwQjs7QUFDQSxJQUFNSSxFQUFFLEdBQUdKLE9BQU8sQ0FBQyxJQUFELENBQWxCOztBQUNBLElBQU1LLFlBQVksR0FBR0wsT0FBTyxDQUFDLDRCQUFELENBQTVCOztBQUNBLElBQU1NLFdBQVcsR0FBR04sT0FBTyxDQUFDLGdCQUFELENBQTNCOztBQUVBLElBQU1PLFlBQVksR0FBRyxTQUFmQSxZQUFlO0FBQUEsU0FBTUMsT0FBTyxDQUFDQyxHQUFSLENBQVksNERBQVosQ0FBTjtBQUFBLENBQXJCO0FBRUE7OztTQUNlQyxPOzs7Ozs7OzRCQUFmLGlCQUF3QkMsTUFBeEIsRUFB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Y2VSb290IjoiLi4vLi4vbGliIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeGVjdXRlIGNsaS5cbiAqIEBmdW5jdGlvbiBleGVjY2xpXG4gKiBAcGFyYW0ge3N0cmluZ30gY21kQmluIC0gQmluIGNvbW1hbmQgdG8gZXhlY3V0ZS5cbiAqIEBwYXJhbSB7QXJyYXl9IGNtZEFyZ3MgLSBCaW4gY29tbWFuZCBhcmd1bWVudHMgdG8gZXhlY3V0ZS5cbiAqIEBwYXJhbSB7b2JqZWN0fSBbb3B0aW9uc10gLSBPcHRpb25hbCBzZXR0aW5ncy5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5ub3Rmb3VuZF0gLSBJbnN0cnVjdGlvbiB0ZXh0IHdoZW4gYmluIG5vdCBmb3VuZC5cbiAqIEBwYXJhbSB7c3RyaW5nfSBbb3B0aW9ucy5jd2Q9cHJvY2Vzcy5jd2QoKV0gLSBXb3JraW5nIGRpcmVjdG9yeSBwYXRoLlxuICogQHJldHVybiB7UHJvbWlzZX1cbiAqIEBleGFtcGxlXG4gKlxuICovXG5cbid1c2Ugc3RyaWN0J1xuXG5jb25zdCBhcmd4ID0gcmVxdWlyZSgnYXJneCcpXG5jb25zdCBhcnJheXJlZHVjZSA9IHJlcXVpcmUoJ2FycmF5cmVkdWNlJylcbmNvbnN0IGhhc2JpbiA9IHJlcXVpcmUoJ2hhc2JpbicpXG5jb25zdCBwYXRoID0gcmVxdWlyZSgncGF0aCcpXG5jb25zdCBmcyA9IHJlcXVpcmUoJ2ZzJylcbmNvbnN0IHNwYXduUHJvY2VzcyA9IHJlcXVpcmUoJy4vcHJvY2Vzc2luZy9zcGF3bl9wcm9jZXNzJylcbmNvbnN0IF9vcHRpb25BcmdzID0gcmVxdWlyZSgnLi9fb3B0aW9uX2FyZ3MnKVxuXG5jb25zdCB3YXJuQ2FsbGJhY2sgPSAoKSA9PiBjb25zb2xlLmxvZygnW2V4ZWNjbGldIENhbGxiYWNrIGlzIG5vdyBkZXByZWNhdGVkLiBVc2UgcHJvbWlzZSBpbnN0ZWFkLicpXG5cbi8qKiBAbGVuZHMgZXhlY2NsaSAqL1xuYXN5bmMgZnVuY3Rpb24gZXhlY2NsaSAoY21kQmluLCBjbWRBcmdzLCBvcHRpb25zKSB7XG4gIGxldCBhcmdzID0gYXJneChhcmd1bWVudHMpXG4gIGxldCBjYWxsYmFjayA9IGFyZ3MucG9wKCdmdW5jdGlvbicpXG4gIGNtZEJpbiA9IGFyZ3Muc2hpZnQoJ3N0cmluZycpXG4gIGNtZEFyZ3MgPSAoYXJncy5zaGlmdCgnYXJyYXknKSB8fCBbXSkubWFwKChhcmcpID0+IHtcbiAgICBpZiAodHlwZW9mIGFyZyA9PT0gJ29iamVjdCcpIHtcbiAgICAgIHJldHVybiBfb3B0aW9uQXJncyhhcmcpXG4gICAgfVxuICAgIHJldHVybiBhcmdcbiAgfSkucmVkdWNlKGFycmF5cmVkdWNlLmFycmF5Q29uY2F0KCksIFtdKVxuICBvcHRpb25zID0gYXJncy5wb3AoJ29iamVjdCcpIHx8IHt9XG5cbiAgbGV0IGhlcmUgPSBwcm9jZXNzLmN3ZCgpXG4gIGxldCBjd2QgPSBvcHRpb25zLmN3ZCB8fCBwcm9jZXNzLmN3ZCgpXG5cbiAgdHJ5IHtcbiAgICBwcm9jZXNzLmNoZGlyKGN3ZClcbiAgICBsZXQgaGFzQmluQXNJcyA9IGF3YWl0IG5ldyBQcm9taXNlKChyZXNvbHZlKSA9PlxuICAgICAgaGFzYmluKGNtZEJpbiwgKGhhc0JpbkFzSXMpID0+IHJlc29sdmUoaGFzQmluQXNJcykpXG4gICAgKVxuICAgIGxldCBoYXNiaW5Bc1BhdGggPSBhd2FpdCBuZXcgUHJvbWlzZSgocmVzb2x2ZSkgPT5cbiAgICAgIGZzLmV4aXN0cyhwYXRoLnJlc29sdmUoY21kQmluKSwgKGhhc2JpbkFzUGF0aCkgPT4gcmVzb2x2ZShoYXNiaW5Bc1BhdGgpKVxuICAgIClcbiAgICBsZXQgdmFsaWQgPSBoYXNCaW5Bc0lzIHx8IGhhc2JpbkFzUGF0aFxuICAgIGlmICghdmFsaWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgYENvbW1hbmQgXFxgJHtjbWRCaW59XFxgIG5vdCBmb3VuZC4gJHtvcHRpb25zLm5vdGZvdW5kfWBcbiAgICAgIClcbiAgICB9XG4gICAgY29uc3QgcmVzdWx0ID0gYXdhaXQgc3Bhd25Qcm9jZXNzKGNtZEJpbiwgY21kQXJncywgb3B0aW9ucylcbiAgICBwcm9jZXNzLmNoZGlyKGhlcmUpXG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB3YXJuQ2FsbGJhY2soKVxuICAgICAgY2FsbGJhY2sobnVsbClcbiAgICB9XG4gICAgcmV0dXJuIHJlc3VsdFxuICB9IGNhdGNoIChlcnIpIHtcbiAgICBwcm9jZXNzLmNoZGlyKGhlcmUpXG4gICAgaWYgKGNhbGxiYWNrKSB7XG4gICAgICB3YXJuQ2FsbGJhY2soKVxuICAgICAgY2FsbGJhY2soZXJyKVxuICAgIH1cbiAgICByZXR1cm4gUHJvbWlzZS5yZWplY3QoZXJyKVxuICB9XG59XG5cbmV4ZWNjbGkuX29wdGlvbkFyZ3MgPSBfb3B0aW9uQXJnc1xuXG5tb2R1bGUuZXhwb3J0cyA9IGV4ZWNjbGlcbiJdfQ==