/**
 * Execute npm bin script.
 * @function npmBin
 * @param {string} cmdBin - Bin command to execute.
 * @param {Array} cmdArgs - Bin command arguments to execute.
 * @param {object} [options] - Optional settings.
 * @param {string} [options.notfound] - Instruction text when bin not found.
 * @param {string|string[]} [options.search=[]] - Local module search path.
 * @param {function} [callback] - Callback when done.
 */
'use strict';

var findout = require('findout');

var argx = require('argx');

var execcli = require('./execcli');
/** @lends npmBin */


function npmBin(cmd, cmdArgs, options) {
  var args = argx(arguments);
  var callback = args.pop('function');
  options = args.pop('object') || {};
  var search = [].concat(options.search || []);
  cmd = _resolve(cmd, search);
  delete options.search;

  if (callback) {
    execcli(cmd, cmdArgs, options, callback);
  }

  return execcli(cmd, cmdArgs, options);
}

module.exports = npmBin;

function _resolve(bin, cwd) {
  for (var i = 0; i < cwd.length; i++) {
    var found = _resolveByLocal(bin, cwd[i]);

    if (found) {
      return found;
    }
  }

  return bin;
}

function _resolveByLocal(bin, cwd) {
  return findout.resolve('node_modules/.bin/' + bin, {
    safe: true,
    cwd: cwd
  });
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIm5wbV9iaW4uanMiXSwibmFtZXMiOlsiZmluZG91dCIsInJlcXVpcmUiLCJhcmd4IiwiZXhlY2NsaSIsIm5wbUJpbiIsImNtZCIsImNtZEFyZ3MiLCJvcHRpb25zIiwiYXJncyIsImFyZ3VtZW50cyIsImNhbGxiYWNrIiwicG9wIiwic2VhcmNoIiwiY29uY2F0IiwiX3Jlc29sdmUiLCJtb2R1bGUiLCJleHBvcnRzIiwiYmluIiwiY3dkIiwiaSIsImxlbmd0aCIsImZvdW5kIiwiX3Jlc29sdmVCeUxvY2FsIiwicmVzb2x2ZSIsInNhZmUiXSwibWFwcGluZ3MiOiJBQUFBOzs7Ozs7Ozs7O0FBV0E7O0FBRUEsSUFBTUEsT0FBTyxHQUFHQyxPQUFPLENBQUMsU0FBRCxDQUF2Qjs7QUFDQSxJQUFNQyxJQUFJLEdBQUdELE9BQU8sQ0FBQyxNQUFELENBQXBCOztBQUNBLElBQU1FLE9BQU8sR0FBR0YsT0FBTyxDQUFDLFdBQUQsQ0FBdkI7QUFFQTs7O0FBQ0EsU0FBU0csTUFBVCxDQUFpQkMsR0FBakIsRUFBc0JDLE9BQXRCLEVBQStCQyxPQUEvQixFQUF3QztBQUN0QyxNQUFJQyxJQUFJLEdBQUdOLElBQUksQ0FBQ08sU0FBRCxDQUFmO0FBQ0EsTUFBSUMsUUFBUSxHQUFHRixJQUFJLENBQUNHLEdBQUwsQ0FBUyxVQUFULENBQWY7QUFDQUosRUFBQUEsT0FBTyxHQUFHQyxJQUFJLENBQUNHLEdBQUwsQ0FBUyxRQUFULEtBQXNCLEVBQWhDO0FBRUEsTUFBSUMsTUFBTSxHQUFHLEdBQUdDLE1BQUgsQ0FBVU4sT0FBTyxDQUFDSyxNQUFSLElBQWtCLEVBQTVCLENBQWI7QUFDQVAsRUFBQUEsR0FBRyxHQUFHUyxRQUFRLENBQUNULEdBQUQsRUFBTU8sTUFBTixDQUFkO0FBQ0EsU0FBT0wsT0FBTyxDQUFDSyxNQUFmOztBQUNBLE1BQUlGLFFBQUosRUFBYztBQUNaUCxJQUFBQSxPQUFPLENBQUNFLEdBQUQsRUFBTUMsT0FBTixFQUFlQyxPQUFmLEVBQXdCRyxRQUF4QixDQUFQO0FBQ0Q7O0FBQ0QsU0FBT1AsT0FBTyxDQUFDRSxHQUFELEVBQU1DLE9BQU4sRUFBZUMsT0FBZixDQUFkO0FBQ0Q7O0FBRURRLE1BQU0sQ0FBQ0MsT0FBUCxHQUFpQlosTUFBakI7O0FBRUEsU0FBU1UsUUFBVCxDQUFtQkcsR0FBbkIsRUFBd0JDLEdBQXhCLEVBQTZCO0FBQzNCLE9BQUssSUFBSUMsQ0FBQyxHQUFHLENBQWIsRUFBZ0JBLENBQUMsR0FBR0QsR0FBRyxDQUFDRSxNQUF4QixFQUFnQ0QsQ0FBQyxFQUFqQyxFQUFxQztBQUNuQyxRQUFJRSxLQUFLLEdBQUdDLGVBQWUsQ0FBQ0wsR0FBRCxFQUFNQyxHQUFHLENBQUVDLENBQUYsQ0FBVCxDQUEzQjs7QUFDQSxRQUFJRSxLQUFKLEVBQVc7QUFDVCxhQUFPQSxLQUFQO0FBQ0Q7QUFDRjs7QUFDRCxTQUFPSixHQUFQO0FBQ0Q7O0FBRUQsU0FBU0ssZUFBVCxDQUEwQkwsR0FBMUIsRUFBK0JDLEdBQS9CLEVBQW9DO0FBQ2xDLFNBQU9sQixPQUFPLENBQUN1QixPQUFSLENBQWdCLHVCQUF1Qk4sR0FBdkMsRUFBNEM7QUFDakRPLElBQUFBLElBQUksRUFBRSxJQUQyQztBQUVqRE4sSUFBQUEsR0FBRyxFQUFFQTtBQUY0QyxHQUE1QyxDQUFQO0FBSUQiLCJzb3VyY2VSb290IjoiLi4vLi4vbGliIiwic291cmNlc0NvbnRlbnQiOlsiLyoqXG4gKiBFeGVjdXRlIG5wbSBiaW4gc2NyaXB0LlxuICogQGZ1bmN0aW9uIG5wbUJpblxuICogQHBhcmFtIHtzdHJpbmd9IGNtZEJpbiAtIEJpbiBjb21tYW5kIHRvIGV4ZWN1dGUuXG4gKiBAcGFyYW0ge0FycmF5fSBjbWRBcmdzIC0gQmluIGNvbW1hbmQgYXJndW1lbnRzIHRvIGV4ZWN1dGUuXG4gKiBAcGFyYW0ge29iamVjdH0gW29wdGlvbnNdIC0gT3B0aW9uYWwgc2V0dGluZ3MuXG4gKiBAcGFyYW0ge3N0cmluZ30gW29wdGlvbnMubm90Zm91bmRdIC0gSW5zdHJ1Y3Rpb24gdGV4dCB3aGVuIGJpbiBub3QgZm91bmQuXG4gKiBAcGFyYW0ge3N0cmluZ3xzdHJpbmdbXX0gW29wdGlvbnMuc2VhcmNoPVtdXSAtIExvY2FsIG1vZHVsZSBzZWFyY2ggcGF0aC5cbiAqIEBwYXJhbSB7ZnVuY3Rpb259IFtjYWxsYmFja10gLSBDYWxsYmFjayB3aGVuIGRvbmUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGZpbmRvdXQgPSByZXF1aXJlKCdmaW5kb3V0JylcbmNvbnN0IGFyZ3ggPSByZXF1aXJlKCdhcmd4JylcbmNvbnN0IGV4ZWNjbGkgPSByZXF1aXJlKCcuL2V4ZWNjbGknKVxuXG4vKiogQGxlbmRzIG5wbUJpbiAqL1xuZnVuY3Rpb24gbnBtQmluIChjbWQsIGNtZEFyZ3MsIG9wdGlvbnMpIHtcbiAgbGV0IGFyZ3MgPSBhcmd4KGFyZ3VtZW50cylcbiAgbGV0IGNhbGxiYWNrID0gYXJncy5wb3AoJ2Z1bmN0aW9uJylcbiAgb3B0aW9ucyA9IGFyZ3MucG9wKCdvYmplY3QnKSB8fCB7fVxuXG4gIGxldCBzZWFyY2ggPSBbXS5jb25jYXQob3B0aW9ucy5zZWFyY2ggfHwgW10pXG4gIGNtZCA9IF9yZXNvbHZlKGNtZCwgc2VhcmNoKVxuICBkZWxldGUgb3B0aW9ucy5zZWFyY2hcbiAgaWYgKGNhbGxiYWNrKSB7XG4gICAgZXhlY2NsaShjbWQsIGNtZEFyZ3MsIG9wdGlvbnMsIGNhbGxiYWNrKVxuICB9XG4gIHJldHVybiBleGVjY2xpKGNtZCwgY21kQXJncywgb3B0aW9ucylcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBucG1CaW5cblxuZnVuY3Rpb24gX3Jlc29sdmUgKGJpbiwgY3dkKSB7XG4gIGZvciAobGV0IGkgPSAwOyBpIDwgY3dkLmxlbmd0aDsgaSsrKSB7XG4gICAgbGV0IGZvdW5kID0gX3Jlc29sdmVCeUxvY2FsKGJpbiwgY3dkWyBpIF0pXG4gICAgaWYgKGZvdW5kKSB7XG4gICAgICByZXR1cm4gZm91bmRcbiAgICB9XG4gIH1cbiAgcmV0dXJuIGJpblxufVxuXG5mdW5jdGlvbiBfcmVzb2x2ZUJ5TG9jYWwgKGJpbiwgY3dkKSB7XG4gIHJldHVybiBmaW5kb3V0LnJlc29sdmUoJ25vZGVfbW9kdWxlcy8uYmluLycgKyBiaW4sIHtcbiAgICBzYWZlOiB0cnVlLFxuICAgIGN3ZDogY3dkXG4gIH0pXG59XG4iXX0=