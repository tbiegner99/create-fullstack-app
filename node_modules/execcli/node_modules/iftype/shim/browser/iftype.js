/**
 * Type check instance.
 * @constructor Iftype
 * @param {*} value - Value to check.
 */
'use strict';

var is = require('./is');
/** @lends Iftype */


function Iftype(val) {
  this.val(val);
}

Iftype.prototype = {
  /**
   * Detect type matches.
   * @param {string} type
   * @returns {boolean} - Type matches or not.
   */
  is: function typeIs(type) {
    return is(type, this.val());
  },

  /**
   * Detect if string.
   * @returns {boolean} - Type matches or not.
   */
  isString: function isStringType() {
    var s = this;
    return s.is('string');
  },

  /**
   * Detect if number.
   * @returns {boolean} - Type matches or not.
   */
  isNumber: function isNumberType() {
    var s = this;
    return s.is('number');
  },

  /**
   * Detect if object.
   * @returns {boolean} - Type matches or not.
   */
  isObject: function isObjectType() {
    var s = this;
    return s.is('object');
  },

  /**
   * Detect if array.
   * @returns {boolean} - Type matches or not.
   */
  isArray: function isArrayType() {
    var s = this;
    return s.is('array');
  },

  /**
   * Detect if function.
   * @returns {boolean} - Type matches or not.
   */
  isFunction: function isFunctionType() {
    var s = this;
    return s.is('function');
  },
  val: function val(_val) {
    if (arguments.length === 0) {
      return this._val;
    }

    this._val = _val;
    return this;
  }
};
module.exports = Iftype;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImlmdHlwZS5qcyJdLCJuYW1lcyI6WyJpcyIsInJlcXVpcmUiLCJJZnR5cGUiLCJ2YWwiLCJwcm90b3R5cGUiLCJ0eXBlSXMiLCJ0eXBlIiwiaXNTdHJpbmciLCJpc1N0cmluZ1R5cGUiLCJzIiwiaXNOdW1iZXIiLCJpc051bWJlclR5cGUiLCJpc09iamVjdCIsImlzT2JqZWN0VHlwZSIsImlzQXJyYXkiLCJpc0FycmF5VHlwZSIsImlzRnVuY3Rpb24iLCJpc0Z1bmN0aW9uVHlwZSIsImFyZ3VtZW50cyIsImxlbmd0aCIsIl92YWwiLCJtb2R1bGUiLCJleHBvcnRzIl0sIm1hcHBpbmdzIjoiQUFBQTs7Ozs7QUFNQTs7QUFFQSxJQUFNQSxFQUFFLEdBQUdDLE9BQU8sQ0FBQyxNQUFELENBQWxCO0FBRUE7OztBQUNBLFNBQVNDLE1BQVQsQ0FBZ0JDLEdBQWhCLEVBQXFCO0FBQ25CLE9BQUtBLEdBQUwsQ0FBU0EsR0FBVDtBQUNEOztBQUVERCxNQUFNLENBQUNFLFNBQVAsR0FBbUI7QUFDakI7Ozs7O0FBS0FKLEVBQUFBLEVBQUUsRUFBRSxTQUFTSyxNQUFULENBQWdCQyxJQUFoQixFQUFzQjtBQUN6QixXQUFPTixFQUFFLENBQUNNLElBQUQsRUFBTyxLQUFLSCxHQUFMLEVBQVAsQ0FBVDtBQUNBLEdBUmdCOztBQVNqQjs7OztBQUlBSSxFQUFBQSxRQUFRLEVBQUUsU0FBU0MsWUFBVCxHQUF3QjtBQUNqQyxRQUFNQyxDQUFDLEdBQUcsSUFBVjtBQUNBLFdBQU9BLENBQUMsQ0FBQ1QsRUFBRixDQUFLLFFBQUwsQ0FBUDtBQUNBLEdBaEJnQjs7QUFpQmpCOzs7O0FBSUFVLEVBQUFBLFFBQVEsRUFBRSxTQUFTQyxZQUFULEdBQXdCO0FBQ2pDLFFBQU1GLENBQUMsR0FBRyxJQUFWO0FBQ0EsV0FBT0EsQ0FBQyxDQUFDVCxFQUFGLENBQUssUUFBTCxDQUFQO0FBQ0EsR0F4QmdCOztBQXlCakI7Ozs7QUFJQVksRUFBQUEsUUFBUSxFQUFFLFNBQVNDLFlBQVQsR0FBd0I7QUFDakMsUUFBTUosQ0FBQyxHQUFHLElBQVY7QUFDQSxXQUFPQSxDQUFDLENBQUNULEVBQUYsQ0FBSyxRQUFMLENBQVA7QUFDQSxHQWhDZ0I7O0FBaUNqQjs7OztBQUlBYyxFQUFBQSxPQUFPLEVBQUUsU0FBU0MsV0FBVCxHQUF1QjtBQUMvQixRQUFNTixDQUFDLEdBQUcsSUFBVjtBQUNBLFdBQU9BLENBQUMsQ0FBQ1QsRUFBRixDQUFLLE9BQUwsQ0FBUDtBQUNBLEdBeENnQjs7QUF5Q2pCOzs7O0FBSUFnQixFQUFBQSxVQUFVLEVBQUUsU0FBU0MsY0FBVCxHQUEwQjtBQUNyQyxRQUFNUixDQUFDLEdBQUcsSUFBVjtBQUNBLFdBQU9BLENBQUMsQ0FBQ1QsRUFBRixDQUFLLFVBQUwsQ0FBUDtBQUNBLEdBaERnQjtBQWlEakJHLEVBQUFBLEdBQUcsRUFBRSxhQUFTQSxJQUFULEVBQWE7QUFDakIsUUFBSWUsU0FBUyxDQUFDQyxNQUFWLEtBQXFCLENBQXpCLEVBQTRCO0FBQzNCLGFBQU8sS0FBS0MsSUFBWjtBQUNBOztBQUNELFNBQUtBLElBQUwsR0FBWWpCLElBQVo7QUFDQSxXQUFPLElBQVA7QUFDQTtBQXZEZ0IsQ0FBbkI7QUEwREFrQixNQUFNLENBQUNDLE9BQVAsR0FBaUJwQixNQUFqQiIsInNvdXJjZVJvb3QiOiIuLi8uLi9saWIiLCJzb3VyY2VzQ29udGVudCI6WyIvKipcbiAqIFR5cGUgY2hlY2sgaW5zdGFuY2UuXG4gKiBAY29uc3RydWN0b3IgSWZ0eXBlXG4gKiBAcGFyYW0geyp9IHZhbHVlIC0gVmFsdWUgdG8gY2hlY2suXG4gKi9cblxuJ3VzZSBzdHJpY3QnXG5cbmNvbnN0IGlzID0gcmVxdWlyZSgnLi9pcycpXG5cbi8qKiBAbGVuZHMgSWZ0eXBlICovXG5mdW5jdGlvbiBJZnR5cGUodmFsKSB7XG4gIHRoaXMudmFsKHZhbClcbn1cblxuSWZ0eXBlLnByb3RvdHlwZSA9IHtcbiAgLyoqXG4gICAqIERldGVjdCB0eXBlIG1hdGNoZXMuXG4gICAqIEBwYXJhbSB7c3RyaW5nfSB0eXBlXG4gICAqIEByZXR1cm5zIHtib29sZWFufSAtIFR5cGUgbWF0Y2hlcyBvciBub3QuXG4gICAqL1xuICBpczogZnVuY3Rpb24gdHlwZUlzKHR5cGUpIHtcbiAgIHJldHVybiBpcyh0eXBlLCB0aGlzLnZhbCgpKVxuICB9LFxuICAvKipcbiAgICogRGV0ZWN0IGlmIHN0cmluZy5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IC0gVHlwZSBtYXRjaGVzIG9yIG5vdC5cbiAgICovXG4gIGlzU3RyaW5nOiBmdW5jdGlvbiBpc1N0cmluZ1R5cGUoKSB7XG4gICBjb25zdCBzID0gdGhpc1xuICAgcmV0dXJuIHMuaXMoJ3N0cmluZycpXG4gIH0sXG4gIC8qKlxuICAgKiBEZXRlY3QgaWYgbnVtYmVyLlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBUeXBlIG1hdGNoZXMgb3Igbm90LlxuICAgKi9cbiAgaXNOdW1iZXI6IGZ1bmN0aW9uIGlzTnVtYmVyVHlwZSgpIHtcbiAgIGNvbnN0IHMgPSB0aGlzXG4gICByZXR1cm4gcy5pcygnbnVtYmVyJylcbiAgfSxcbiAgLyoqXG4gICAqIERldGVjdCBpZiBvYmplY3QuXG4gICAqIEByZXR1cm5zIHtib29sZWFufSAtIFR5cGUgbWF0Y2hlcyBvciBub3QuXG4gICAqL1xuICBpc09iamVjdDogZnVuY3Rpb24gaXNPYmplY3RUeXBlKCkge1xuICAgY29uc3QgcyA9IHRoaXNcbiAgIHJldHVybiBzLmlzKCdvYmplY3QnKVxuICB9LFxuICAvKipcbiAgICogRGV0ZWN0IGlmIGFycmF5LlxuICAgKiBAcmV0dXJucyB7Ym9vbGVhbn0gLSBUeXBlIG1hdGNoZXMgb3Igbm90LlxuICAgKi9cbiAgaXNBcnJheTogZnVuY3Rpb24gaXNBcnJheVR5cGUoKSB7XG4gICBjb25zdCBzID0gdGhpc1xuICAgcmV0dXJuIHMuaXMoJ2FycmF5JylcbiAgfSxcbiAgLyoqXG4gICAqIERldGVjdCBpZiBmdW5jdGlvbi5cbiAgICogQHJldHVybnMge2Jvb2xlYW59IC0gVHlwZSBtYXRjaGVzIG9yIG5vdC5cbiAgICovXG4gIGlzRnVuY3Rpb246IGZ1bmN0aW9uIGlzRnVuY3Rpb25UeXBlKCkge1xuICAgY29uc3QgcyA9IHRoaXNcbiAgIHJldHVybiBzLmlzKCdmdW5jdGlvbicpXG4gIH0sXG4gIHZhbDogZnVuY3Rpb24odmFsKXtcbiAgIGlmIChhcmd1bWVudHMubGVuZ3RoID09PSAwKSB7XG4gICAgcmV0dXJuIHRoaXMuX3ZhbDtcbiAgIH1cbiAgIHRoaXMuX3ZhbCA9IHZhbFxuICAgcmV0dXJuIHRoaXNcbiAgfVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IElmdHlwZVxuIl19